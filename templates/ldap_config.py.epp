<% |
    String $server,
    String $service_account_cn,
    String $service_account_password,
    String $service_account_ou,
    String $user_search_ou,
    String $full_dc,
    String $netbox_login_group_cn,
    String $netbox_group_ou,
    String $netbox_active_user_cn,
    String $netbox_staff_user_cn,
    String $netbox_superuser_user_cn,
   | -%>

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# Server URI
AUTH_LDAP_SERVER_URI = "ldaps://<%= $server %>"

# The following may be needed if you are binding to Active Directory.
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}

# Set the DN and password for the NetBox service account.
AUTH_LDAP_BIND_DN = "cn=<%= $service_account_cn %>,ou=<%= $service_account_ou %>,<%= $full_dc %>"
AUTH_LDAP_BIND_PASSWORD = "<%= $service_account_password %>"

# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.
# Note that this is a NetBox-specific setting which sets:
#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
LDAP_IGNORE_CERT_ERRORS = True

# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's
# username is not in their DN (Active Directory).
AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=<%= $user_search_ou %>,<%= $full_dc %>",
                                    ldap.SCOPE_SUBTREE,
                                    "(sAMAccountName=%(user)s)")

# If a user's DN is producible from their username, we don't need to search.
AUTH_LDAP_USER_DN_TEMPLATE = None

# You can map user attributes to Django attributes as so.
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}

# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group
# hierarchy.
AUTH_LDAP_GROUP_SEARCH = LDAPSearch("<%= $full_dc %>", ldap.SCOPE_SUBTREE,
                                    "(objectClass=group)")
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# Define a group required to login.
AUTH_LDAP_REQUIRE_GROUP = "cn=<%= $netbox_login_group_cn %>,ou=<%= $netbox_group_ou %>,<%= $full_dc %>"

# Mirror LDAP group assignments.
AUTH_LDAP_MIRROR_GROUPS = True

# Define special user types using groups. Exercise great caution when assigning superuser status.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=<%= $netbox_active_user_cn %>,ou=<%= $netbox_group_ou %>,<%= $full_dc %>",
    "is_staff": "cn=<%= $netbox_staff_user_cn %>,ou=<%= $netbox_group_ou %>,<%= $full_dc %>",
    "is_superuser": "cn=<%= $netbox_superuser_user_cn %>,ou=<%= $netbox_group_ou %>,<%= $full_dc %>"
}

# For more granular permissions, we can map LDAP groups to Django groups.
AUTH_LDAP_FIND_GROUP_PERMS = True

# Cache groups for one hour to reduce LDAP traffic
AUTH_LDAP_CACHE_TIMEOUT = 3600
